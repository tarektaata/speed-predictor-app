# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lsUUe7sn3zcmVCxYmF5_80MYW7P4jCo0
"""

# استيراد المكتبات الأساسية
import pandas as pd
import numpy as np

# تحميل الملف من جهازك داخل Google Colab
uploaded_file = st.file_uploader("رفع ملف البيانات هنا", type=["xlsx"])


# قراءة أول ملف تم رفعه بصيغة Excel
df = pd.read_excel(list(uploaded.keys())[0])

# معاينة أول 5 صفوف للتأكد من سلامة البيانات
df.head()

# إعادة تسمية الأعمدة بأسماء منطقية حسب المحتوى
df.columns = ['row_id', 'round_number', 'speed']

# حذف العمود الأول لو مش مهم
df.drop(columns=['row_id'], inplace=True)

# التحقق من الشكل بعد التنظيف
df.head()

# تحويل جميع الأعمدة لأرقام (لو فيها قيم نصية غلط تتحول NaN)
df = df.apply(pd.to_numeric, errors='coerce')

# حذف الصفوف اللي فيها قيم ناقصة
df.dropna(inplace=True)

# التحقق من الشكل النهائي للبيانات بعد التنظيف
df.head()

# فصل المدخلات والمخرجات
X = df[['round_number']]
y = df['speed']

# التأكد من الشكل
print("X shape:", X.shape)
print("y shape:", y.shape)

# استيراد المكتبات
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor

# تدريب النماذج
lr = LinearRegression().fit(X, y)
dt = DecisionTreeRegressor().fit(X, y)
rf = RandomForestRegressor().fit(X, y)

# اختبار النماذج على رقم جولة جديد (مثلاً الجولة رقم 501)
new_round = pd.DataFrame({'round_number': [501]})
print("🔹 Linear Regression prediction:", lr.predict(new_round)[0])
print("🔸 Decision Tree prediction:", dt.predict(new_round)[0])
print("🔹 Random Forest prediction:", rf.predict(new_round)[0])

# !pip install streamlit ← مش ضروري داخل Streamlit Cloud

# تحميل الملف تلقائيًا من الملفات المرفوعة
file_name = list(uploaded.keys())[0]  # ← بيجيب اسم أول ملف مرفوع فعليًا
df = pd.read_excel(file_name)

df = pd.read_excel('1 Wen.xlsx')  # ← استخدم اسم الملف الحقيقي

from sklearn.metrics import mean_squared_error, r2_score

print("Linear R2:", r2_score(y, lr.predict(X)))
print("Decision Tree R2:", r2_score(y, dt.predict(X)))
print("Random Forest R2:", r2_score(y, rf.predict(X)))

import streamlit as st

st.title("توقع السرعة بناءً على رقم الجولة")
round_input = st.number_input("ادخل رقم الجولة", min_value=1)
if st.button("توقّع"):
    new_round = pd.DataFrame({'round_number': [round_input]})
    prediction = rf.predict(new_round)[0]
    st.success(f"التوقع: {prediction:.2f}")

new_round = pd.DataFrame({'round_number': [501]})
prediction = rf.predict(new_round)[0]  # ← ده اللي بيحدد القيمة المتوقعة

results = []
# بعد كل توقع، نضيف للـ list
results.append({"round_number": 501, "predicted_speed": prediction})
df_results = pd.DataFrame(results)
df_results.to_excel("predictions.xlsx", index=False)

results = []

# توقع سرعة الجولة رقم 501
new_round = pd.DataFrame({'round_number': [501]})
prediction = rf.predict(new_round)[0]

# حفظ النتيجة
results.append({"round_number": 501, "predicted_speed": prediction})
df_results = pd.DataFrame(results)
df_results.to_excel("predictions.xlsx", index=False)

print("✅ تم حفظ التوقع في ملف predictions.xlsx")

from google.colab import files
uploaded = files.upload()

list(uploaded.keys())  # ← بيطبع اسم الملف اللي رفعتُه

file_name = list(uploaded.keys())[0]
df = pd.read_excel(file_name)

import streamlit as st
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from google.colab import files

st.title("🚀 توقع السرعة حسب رقم الجولة")

# تحميل الملف
uploaded_file = st.file_uploader("📂 ارفع ملف Excel يحتوي على البيانات", type=["xlsx"])
if uploaded_file is not None:
    df = pd.read_excel(uploaded_file)

    # تجهيز البيانات
    df.columns = ['row_id', 'round_number', 'speed']
    df.drop(columns=['row_id'], inplace=True)
    df = df.apply(pd.to_numeric, errors='coerce')
    df.dropna(inplace=True)

    X = df[['round_number']]
    y = df['speed']

    # تدريب النموذج
    rf = RandomForestRegressor().fit(X, y)

    # واجهة التوقع
    round_input = st.number_input("🎯 ادخل رقم الجولة للتوقع", min_value=1)
    if st.button("احسب السرعة المتوقعة"):
        new_round = pd.DataFrame({'round_number': [round_input]})
        prediction = rf.predict(new_round)[0]
        st.success(f"✅ السرعة المتوقعة للجولة {round_input}: {prediction:.2f}")

        # تصدير النتيجة لملف Excel
        result_df = pd.DataFrame([{"round_number": round_input, "predicted_speed": prediction}])
        result_df.to_excel("prediction_result.xlsx", index=False)
        st.info("💾 تم حفظ النتيجة في prediction_result.xlsx")

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor

# رفع ملف البيانات
uploaded_file = st.file_uploader("ارفع ملف الإكسل", type=["xlsx"])
if uploaded_file is not None:
    df = pd.read_excel(uploaded_file)

    df.columns = ['row_id', 'round_number', 'speed']
    df.drop(columns=['row_id'], inplace=True)

    df = df.apply(pd.to_numeric, errors='coerce')
    df.dropna(inplace=True)

    # عرض أول 5 صفوف
    st.write("📊 بيانات التدريب:")
    st.write(df.head())

    # المدخلات والمخرجات
    X = df[['round_number']]
    y = df['speed']

    # تدريب النماذج
    lr = LinearRegression().fit(X, y)
    dt = DecisionTreeRegressor().fit(X, y)
    rf = RandomForestRegressor().fit(X, y)

    # توقع السرعة حسب رقم الجولة
    round_num = st.number_input("اكتب رقم الجولة للتوقع", min_value=1)
    if round_num:
        input_df = pd.DataFrame({'round_number': [round_num]})
        st.write(f"🔹 Linear Regression Prediction: {lr.predict(input_df)[0]:.2f}")
        st.write(f"🔸 Decision Tree Prediction: {dt.predict(input_df)[0]:.2f}")
        st.write(f"🔹 Random Forest Prediction: {rf.predict(input_df)[0]:.2f}")
